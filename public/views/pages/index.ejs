 
<!DOCTYPE html>
<html>
<head>
	 <% include ../partials/head %> 
	<title>interview-prepare of C++</title>
</head>

<body style="padding-left:50px; padding-right:50px">
	<%- include('../partials/header',{user:user}) %> 
	<div id="content">
	<h1 style="text-align:center">C++</h1>
	<ul class="collapsible popout"  data-collapsible="accordion">
	    <li>
	      <div class="collapsible-header"><i class="material-icons">gavel</i>Basic</div>
	      <div class="collapsible-body"><span>
	      	<ul class="collapsible" data-collapsible="accordion">
	      		<li>
	      			<div class="collapsible-header"> <i class="material-icons">star</i>Keywords</div>
	      		 	<div class="collapsible-body"><span>
	      		 		reference (&)<br>
						pointer (*) <br>
						#define (marco)<br>
						virtual<br>
						unsigned<br>
						default<br>
						extern<br>
						friend<br>
						static<br>
						explicit (doesn’t allow one implicit conversion)<br>
						new<br>
						delete<br>
						const<br>
						volatile (stop the compiler from optimizing)<br>
						mutable (can be changed even in an object accessed through a const pointer or reference)<br>
						enum<br>
						bit operation (&, | , ^, ~, <<, >>)<br>
						logical operation ( &&, || , ! )<br>
						auto (c++11)	<br>

	      		 	</span></div>
	      		</li>
	      		<li>
	      			<div class="collapsible-header"> <i class="material-icons">star</i>Concepts</div>
	      		 	<div class="collapsible-body"><span>
	      		 		implicit conversion<br>
						dangling pointer<br>
						object vs instance<br>
						<a href="#" data-toggle="popover" data-content="The inline functions are a C++ enhancement feature to increase the execution time of a program. Functions can be instructed to compiler to make them inline so that compiler can replace those function definition wherever those are being called. Compiler replaces the definition of inline functions at compile time instead of referring function definition at runtime. ">inline function</a><br>
						constructor inheritance<br>
						constructor (copy, default, parametrized)<br>
						destructor <br>
						namespace  <br>
						scope<br>
						function overload<br>
						function override<br>
						reference vs pointer<br>
						virtual destructor<br>
						virtual table (vtable) and vptr<br>
						virtual function<br>
						pure virtual function<br>
						abstract class<br>
						dynamic_cast vs static_cast <br>
						multiple inheritance<br>
						access rights (private, public, protected)<br>
						static function vs member function<br>
						static member data<br>
						dynamic bindling<br>
						iterator<br>
						exception<br>
						template programming<br>
						class template<br>
						function template<br>
						file IO<br>
	      		 	</span></div>
	      		</li>
	      	</ul>

	      </span></div>
	    </li>


	    <li>
	      <div class="collapsible-header"><i class="material-icons">wb_incandescent</i>STL (Standard Template Library)</div>
	      <div class="collapsible-body"> 
	      		 	 <span>
	      		 		vector  <br>
	      		 		deque<br>
	      		 		list<br>
	      		 		pair<br>
						set/ unordered_set<br>
						map / unordered_map  <br>
						stack <br>
						queue/ priority_queue  <br>
						list<br>
	      		 	</span> 
	       </div>
	    </li>
	    <li>
	      <div class="collapsible-header"><i class="material-icons">whatshot</i>Advanced</div>
	      <div class="collapsible-body"><span>
	      		What is RAII (resource acquisition is initialization)? <br>
	      		std::shared_ptr<br>
	      		std::unique_ptr<br>
	      		std::auto_ptr<br>
	      		Boost<br>
	      		QT/MFC<br>
	      </span></div>
	    </li>
  	</ul>

  	</div>

	<% include ../partials/foot %> 
	

</body>

</html>